@*@model CSCAssignment1.Models.StripeChargeModel*@

@{
    ViewBag.Title = "Task6";
}

<script src="https://js.stripe.com/v3/"></script>
<div>
    <label for="email">
        Email
    </label>
    <input type="email" id="email" name="email" />
</div>
<form id="subscription-form">
    <div id="card-element" class="MyCardElement">
        <!-- Elements will create input elements here -->
    </div>
    
    <!-- We'll put the error messages in this element -->
    <div id="card-errors" role="alert"></div>
    <button onclick="createCustomer()" type="button">Subscribe</button>
</form>
<style>
    .MyCardElement {
        height: 40px;
        padding: 10px 12px;
        width: 100%;
        color: #32325d;
        background-color: white;
        border: 1px solid transparent;
        border-radius: 4px;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .MyCardElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .MyCardElement--invalid {
        border-color: #fa755a;
    }

    .MyCardElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
</style>
<script>
    var stripe = Stripe('*');
    var elements = stripe.elements();
    // Set up Stripe.js and Elements to use in checkout form
    var style = {
        base: {
            color: "#32325d",
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: "antialiased",
            fontSize: "16px",
            "::placeholder": {
                color: "#aab7c4"
            }
        },
        invalid: {
            color: "#fa755a",
            iconColor: "#fa755a"
        }
    };
    function createCustomer() {
        let billingEmail = document.querySelector('#email').value;
        return fetch('/api/billing/create-customer', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: billingEmail
            })
        })
        .then(response => {
            return response.json();
        })
        .then(result => {
            // result.customer.id is used to map back to the customer object
            // result.setupIntent.client_secret is used to create the payment method
            return result;
        });
    }
    var cardElement = elements.create("card", { style: style });
    cardElement.mount("#card-element");
    cardElement.on('change', showCardError);

    function showCardError(event) {
        let displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    }
    function createPaymentMethod(cardElement, customerId, priceId) {
        return stripe
            .createPaymentMethod({
                type: 'card',
                card: cardElement,
            })
            .then((result) => {
                if (result.error) {
                    displayError(error);
                } else {
                    createSubscription({
                        customerId: customerId,
                        paymentMethodId: result.paymentMethod.id,
                        priceId: priceId,
                    });
                }
            });
    }
    function createSubscription({ customerId, paymentMethodId, priceId }) {
        return (
            fetch('/api/billing/create-subscription', {
                method: 'post',
                headers: {
                    'Content-type': 'application/json',
                },
                body: JSON.stringify({
                    customerId: customerId,
                    paymentMethodId: paymentMethodId,
                    priceId: priceId,
                }),
            })
                .then((response) => {
                    return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                    if (result.error) {
                        // The card had an error when trying to attach it to a customer.
                        throw result;
                    }
                    return result;
                })
                // Normalize the result to contain the object returned by Stripe.
                // Add the addional details we need.
                .then((result) => {
                    return {
                        paymentMethodId: paymentMethodId,
                        priceId: priceId,
                        subscription: result,
                    };
                })
                // Some payment methods require a customer to be on session
                // to complete the payment process. Check the status of the
                // payment intent to handle these actions.
                .then(handlePaymentThatRequiresCustomerAction)
                // If attaching this card to a Customer object succeeds,
                // but attempts to charge the customer fail, you
                // get a requires_payment_method error.
                .then(handleRequiresPaymentMethod)
                // No more actions required. Provision your service for the user.
                .then(onSubscriptionComplete)
                .catch((error) => {
                    // An error has happened. Display the failure to the user here.
                    // We utilize the HTML element we created.
                    showCardError(error);
                })
        );
    }
    function onSubscriptionComplete(result) {
        // Payment was successful.
        if (result.subscription.status === 'active') {
            // Change your UI to show a success message to your customer.
            // Call your backend to grant access to your service based on
            // `result.subscription.items.data[0].price.product` the customer subscribed to.
        }
    }
    function handleCustomerActionRequired({
        subscription,
        invoice,
        priceId,
        paymentMethodId,
        isRetry,
    }) {
        if (subscription && subscription.status === 'active') {
            // Subscription is active, no customer actions required.
            return { subscription, priceId, paymentMethodId };
        }

        // If it's a first payment attempt, the payment intent is on the subscription latest invoice.
        // If it's a retry, the payment intent will be on the invoice itself.
        let paymentIntent = invoice ? invoice.payment_intent : subscription.latest_invoice.payment_intent;

        if (
            paymentIntent.status === 'requires_action' ||
            (isRetry === true && paymentIntent.status === 'requires_payment_method')
        ) {
            return stripe
                .confirmCardPayment(paymentIntent.client_secret, {
                    payment_method: paymentMethodId,
                })
                .then((result) => {
                    if (result.error) {
                        // Start code flow to handle updating the payment details.
                        // Display error message in your UI.
                        // The card was declined (i.e. insufficient funds, card has expired, etc).
                        throw result;
                    } else {
                        if (result.paymentIntent.status === 'succeeded') {
                            // Show a success message to your customer.
                            // There's a risk of the customer closing the window before the callback.
                            // We recommend setting up webhook endpoints later in this guide.
                            return {
                                priceId: priceId,
                                subscription: subscription,
                                invoice: invoice,
                                paymentMethodId: paymentMethodId,
                            };
                        }
                    }
                })
                .catch((error) => {
                    displayError(error);
                });
        } else {
            // No customer action needed.
            return { subscription, priceId, paymentMethodId };
        }
    }
    function handlePaymentMethodRequired({
        subscription,
        paymentMethodId,
        priceId,
    }) {
        if (subscription.status === 'active') {
            // subscription is active, no customer actions required.
            return { subscription, priceId, paymentMethodId };
        } else if (
            subscription.latest_invoice.payment_intent.status ===
            'requires_payment_method'
        ) {
            // Using localStorage to manage the state of the retry here,
            // feel free to replace with what you prefer.
            // Store the latest invoice ID and status.
            localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);
            localStorage.setItem(
                'latestInvoicePaymentIntentStatus',
                subscription.latest_invoice.payment_intent.status
            );
            throw { error: { message: 'Your card was declined.' } };
        } else {
            return { subscription, priceId, paymentMethodId };
        }
    }
    function retryInvoiceWithNewPaymentMethod(
        customerId,
        paymentMethodId,
        invoiceId,
        priceId
    ) {
        return (
            fetch('/retry-invoice', {
                method: 'post',
                headers: {
                    'Content-type': 'application/json',
                },
                body: JSON.stringify({
                    customerId: customerId,
                    paymentMethodId: paymentMethodId,
                    invoiceId: invoiceId,
                }),
            })
                .then((response) => {
                    return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                    if (result.error) {
                        // The card had an error when trying to attach it to a customer.
                        throw result;
                    }
                    return result;
                })
                // Normalize the result to contain the object returned by Stripe.
                // Add the addional details we need.
                .then((result) => {
                    return {
                        // Use the Stripe 'object' property on the
                        // returned result to understand what object is returned.
                        invoice: result,
                        paymentMethodId: paymentMethodId,
                        priceId: priceId,
                        isRetry: true,
                    };
                })
                // Some payment methods require a customer to be on session
                // to complete the payment process. Check the status of the
                // payment intent to handle these actions.
                .then(handlePaymentThatRequiresCustomerAction)
                // No more actions required. Provision your service for the user.
                .then(onSubscriptionComplete)
                .catch((error) => {
                    // An error has happened. Display the failure to the user here.
                    // We utilize the HTML element we created.
                    displayError(error);
                })
        );
    }
    function cancelSubscription() {
        return fetch('/cancel-subscription', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                subscriptionId: subscriptionId,
            }),
        })
            .then(response => {
                return response.json();
            })
            .then(cancelSubscriptionResponse => {
                // Display to the user that the subscription has been cancelled.
            });
    }
</script>
@*<h2>Stripe Charge Example with Stripe.js</h2>
    <div>
        <h4>Stripe Charge Example</h4>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                <label for="txtCardNumber">Card Number *</label>
            </dt>
            <dd>
                <input type="text" id="txtCardNumber" placeholder="Card Number e.g 1234..." />
            </dd>
            <dt>
                <label for="txtCvc">Cvc *</label>
            </dt>
            <dd>
                <input type="text" id="txtCvc" placeholder="Security Code e.g 987" />
            </dd>
            <dt>
                <label for="txtExpiryMonth">Expiry Month (MM) *</label>
            </dt>
            <dd>
                <input type="text" id="txtExpiryMonth" placeholder="01" />
            </dd>
            <dt>
                <label for="txtExpiryYear">Expiry Year (YYYY) *</label>)
            </dt>
            <dd>
                <input type="text" id="txtExpiryYear" placeholder="2015" />
            </dd>
        </dl>
    </div>
    @using (Html.BeginForm("task6", "tasks", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "frmCharge" }))
    {
        @Html.AntiForgeryToken()
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.CardHolderName)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.CardHolderName, new { id = "txtCardHolderName" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Amount)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.Amount, new { id = "txtAmount" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AddressLine1)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.AddressLine1, new { id = "txtAddress1" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AddressLine2)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.AddressLine2, new { id = "txtAddress2" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AddressCity)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.AddressCity, new { id = "txtCity" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AddressPostcode)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.AddressPostcode, new { id = "txtPostcode" })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.AddressCountry)
            </dt>
            <dd>
                @Html.TextBoxFor(model => model.AddressCountry, new { id = "txtCountry" })
            </dd>
        </dl>
        <p>
            @Html.HiddenFor(model => model.Token, new { id = "hdnToken" })
            @Html.ActionLink("ProcessPayment", "Charge", null, new { id = "btnCharge" })
        </p>
    }


    @section Scripts {
        <script type="text/javascript" src="https://js.stripe.com/v2/"></script>
        <script type="text/javascript">
            $('document').ready(function () {
                Stripe.setPublishableKey('*');
                $('#btnCharge').on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    Stripe.card.createToken({
                        number: $('#txtCardNumber').val(),
                        cvc: $('#txtCvc').val(),
                        exp_month: $('#txtExpiryMonth').val(),
                        exp_year: $('#txtExpiryYear').val()
                    }, stripeResponseHandler);
                });

                function stripeResponseHandler(status, response) {
                    var $form = $('#frmCharge');
                    if (response.error) {
                        // Show the errors on the form
                        alert(response.error.message);
                    } else {
                        // response contains id and card, which contains additional card details
                        var token = response.id;
                        // Insert the token into the form so it gets submitted to the server
                        $('#hdnToken').val(token);
                        // and submit
                        $form.get(0).submit();
                    }
                }
            });
            function createCustomer() {
                let billingEmail = document.querySelector('#email').value;
                return fetch('/create-customer', {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: billingEmail
                    })
                })
                    .then(response => {
                        return response.json();
                    })
                    .then(result => {
                        // result.customer.id is used to map back to the customer object
                        // result.setupIntent.client_secret is used to create the payment method
                        return result;
                    });
            }
        </script>
    }*@
